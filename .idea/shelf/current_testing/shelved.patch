Index: nifi-prometheus-reporting-task/src/main/java/org/apache/nifi/reporting/prometheus/PrometheusReportingTask.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.nifi.reporting.prometheus;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.regex.Pattern;\n\nimport com.yammer.metrics.core.VirtualMachineMetrics;\nimport io.prometheus.client.exporter.BasicAuthHttpConnectionFactory;\nimport io.prometheus.client.exporter.PushGateway;\nimport org.apache.nifi.annotation.configuration.DefaultSchedule;\nimport org.apache.nifi.annotation.documentation.CapabilityDescription;\nimport org.apache.nifi.annotation.documentation.Tags;\nimport org.apache.nifi.components.PropertyDescriptor;\nimport org.apache.nifi.components.PropertyValue;\nimport org.apache.nifi.controller.status.ProcessGroupStatus;\nimport org.apache.nifi.expression.ExpressionLanguageScope;\nimport org.apache.nifi.processor.util.StandardValidators;\nimport org.apache.nifi.reporting.AbstractReportingTask;\nimport org.apache.nifi.reporting.ReportingContext;\nimport org.apache.nifi.reporting.prometheus.api.PrometheusMetricsFactory;\nimport org.apache.nifi.scheduling.SchedulingStrategy;\n\n/**\n * ReportingTask to send metrics from Nifi and JVM to Prometheus PushGateway.\n *\n * Author: Daniel-Seifert\n */\n@Tags({\"reporting\", \"prometheus\", \"metrics\"})\n@CapabilityDescription(\"Sends JVM-metrics as well as Nifi-metrics to a Prometheus PushGateway.\" +\n        \"Nifi-metrics can be either configured global or on process-group level.\")\n@DefaultSchedule(strategy = SchedulingStrategy.TIMER_DRIVEN, period = \"1 min\")\npublic class PrometheusReportingTask extends AbstractReportingTask {\n\n    private static final String JVM_JOB_NAME = \"jvm_global\";\n\n    static final PropertyDescriptor METRICS_COLLECTOR_URL = new PropertyDescriptor.Builder()\n            .name(\"Prometheus PushGateway\")\n            .description(\"The URL of the Prometheus PushGateway Service\")\n            .required(true)\n            .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)\n            .defaultValue(\"http://localhost:9091\")\n            .addValidator(StandardValidators.URL_VALIDATOR)\n            .build();\n    static final PropertyDescriptor APPLICATION_ID = new PropertyDescriptor.Builder()\n            .name(\"Application ID\")\n            .description(\"The Application ID to be included in the metrics sent to Prometheus\")\n            .required(true)\n            .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)\n            .defaultValue(\"nifi\")\n            .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)\n            .build();\n    static final PropertyDescriptor INSTANCE_ID = new PropertyDescriptor.Builder()\n            .name(\"Instance ID\")\n            .description(\"Id of this NiFi instance to be included in the metrics sent to Prometheus\")\n            .required(true)\n            .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)\n            .defaultValue(\"${hostname(true)}\")\n            .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)\n            .build();\n    static final PropertyDescriptor PROCESS_GROUP_IDS = new PropertyDescriptor.Builder()\n            .name(\"Process group ID(s)\")\n            .description(\"If specified, the reporting task will send metrics the configured ProcessGroup(s) only. Multiple IDs should be separated by a comma. If\"\n                    + \" none of the group-IDs could be found or no IDs are defined, the Nifi-Flow-ProcessGroup is used and global metrics are sent.\")\n            .required(false)\n            .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)\n            .addValidator(StandardValidators\n                    .createListValidator(true, true\n                            , StandardValidators.createRegexMatchingValidator(Pattern.compile(\"[0-9a-z-]+\"))))\n            .build();\n    static final PropertyDescriptor JOB_NAME = new PropertyDescriptor.Builder()\n            .name(\"The job name\")\n            .description(\"The name of the exporting job\")\n            .defaultValue(\"nifi_reporting_job\")\n            .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)\n            .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)\n            .build();\n    static final PropertyDescriptor SEND_JVM_METRICS = new PropertyDescriptor.Builder()\n            .name(\"Send JVM-metrics\")\n            .description(\"Send JVM-metrics in addition to the Nifi-metrics\")\n            .allowableValues(\"true\", \"false\")\n            .defaultValue(\"false\")\n            .required(true)\n            .build();\n    static final PropertyDescriptor USE_AUTHENTICATION = new PropertyDescriptor.Builder()\n            .name(\"Use URL authentication\")\n            .description(\"Whether to use URL authentication or not\")\n            .allowableValues(\"true\", \"false\")\n            .defaultValue(\"false\")\n            .required(true)\n            .build();\n    static final PropertyDescriptor AUTH_USERNAME = new PropertyDescriptor.Builder()\n            .name(\"Auth username\")\n            .description(\"Username that is used for URL authentication.\")\n            .required(false)\n            .build();\n    static final PropertyDescriptor AUTH_PASSWORD = new PropertyDescriptor.Builder()\n            .name(\"Auth password\")\n            .description(\"Password that is used for URL authentication.\")\n            .required(false)\n            .sensitive(true)\n            .build();\n\n    @Override\n    protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {\n        final List<PropertyDescriptor> properties = new ArrayList<>();\n        properties.add(METRICS_COLLECTOR_URL);\n        properties.add(APPLICATION_ID);\n        properties.add(INSTANCE_ID);\n        properties.add(PROCESS_GROUP_IDS);\n        properties.add(JOB_NAME);\n        properties.add(SEND_JVM_METRICS);\n        properties.add(USE_AUTHENTICATION);\n        properties.add(AUTH_USERNAME);\n        properties.add(AUTH_PASSWORD);\n        return properties;\n    }\n\n    @Override\n    public void onTrigger(final ReportingContext context) {\n        final String metricsCollectorUrl = context.getProperty(METRICS_COLLECTOR_URL)\n                .evaluateAttributeExpressions().getValue()\n                .replace(\"http://\", \"\");\n\n        final String applicationId = context.getProperty(APPLICATION_ID).evaluateAttributeExpressions().getValue();\n        final String jobName = context.getProperty(JOB_NAME).getValue();\n        final String instance = context.getProperty(INSTANCE_ID).evaluateAttributeExpressions().getValue();\n        final String username = context.getProperty(AUTH_USERNAME).getValue();\n        final String password = context.getProperty(AUTH_PASSWORD).getValue();\n        final Map<String,String> groupingKey = Collections.singletonMap(\"instance\", instance);\n\n        // Init PushGateway\n        final PushGateway pushGateway = new PushGateway(metricsCollectorUrl);\n        if(context.getProperty(USE_AUTHENTICATION).asBoolean()){\n            pushGateway.setConnectionFactory(new BasicAuthHttpConnectionFactory(username, password));\n        }\n\n        try {\n            if (context.getProperty(SEND_JVM_METRICS).asBoolean()) {\n                pushGateway.pushAdd(PrometheusMetricsFactory.createJvmMetrics(VirtualMachineMetrics.getInstance()), JVM_JOB_NAME, groupingKey);\n            }\n        } catch (IOException e) {\n            getLogger().error(\"Failed pushing JVM-metrics to Prometheus PushGateway due to {}; routing to failure\", e);\n        }\n\n        for (ProcessGroupStatus status : searchProcessGroups(context, context.getProperty(PROCESS_GROUP_IDS))) {\n            try {\n                pushGateway.pushAdd(PrometheusMetricsFactory.createNifiMetrics(status, applicationId), jobName, groupingKey);\n            } catch (IOException e) {\n                getLogger().error(\"Failed pushing Nifi-metrics to Prometheus PushGateway due to {}; routing to failure\", e);\n            }\n        }\n    }\n\n    /**\n     * Searches all ProcessGroups defined in a PropertyValue as a comma-separated list of ProcessorGroup-IDs.\n     * Therefore blanks are trimmed and new-line characters are removed! Processors that can not be found are ignored.\n     *\n     * @return List of all ProcessorGroups that were found.\n     * If no groupIDs are defined or none of them could be found an array containing the root-DataFlow will be returned.\n     */\n    private ProcessGroupStatus[] searchProcessGroups(final ReportingContext context, PropertyValue value) {\n        if (value.isSet()) {\n            String content = value.evaluateAttributeExpressions().getValue();\n\n            ProcessGroupStatus[] groups = Arrays\n                    .stream(content.replace(\"\\n\", \"\").split(\",\"))\n                    .map(String::trim)\n                    .map(context.getEventAccess()::getGroupStatus)\n                    .filter(Objects::nonNull)\n                    .toArray(ProcessGroupStatus[]::new);\n\n            return groups.length > 0 ? groups : new ProcessGroupStatus[]{context.getEventAccess().getControllerStatus()};\n        } else {\n            return new ProcessGroupStatus[]{context.getEventAccess().getControllerStatus()};\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- nifi-prometheus-reporting-task/src/main/java/org/apache/nifi/reporting/prometheus/PrometheusReportingTask.java	(date 1533023184000)
+++ nifi-prometheus-reporting-task/src/main/java/org/apache/nifi/reporting/prometheus/PrometheusReportingTask.java	(date 1533023858000)
@@ -145,13 +145,13 @@
         final String applicationId = context.getProperty(APPLICATION_ID).evaluateAttributeExpressions().getValue();
         final String jobName = context.getProperty(JOB_NAME).getValue();
         final String instance = context.getProperty(INSTANCE_ID).evaluateAttributeExpressions().getValue();
-        final String username = context.getProperty(AUTH_USERNAME).getValue();
-        final String password = context.getProperty(AUTH_PASSWORD).getValue();
         final Map<String,String> groupingKey = Collections.singletonMap("instance", instance);
 
         // Init PushGateway
         final PushGateway pushGateway = new PushGateway(metricsCollectorUrl);
         if(context.getProperty(USE_AUTHENTICATION).asBoolean()){
+            final String username = context.getProperty(AUTH_USERNAME).getValue();
+            final String password = context.getProperty(AUTH_PASSWORD).getValue();
             pushGateway.setConnectionFactory(new BasicAuthHttpConnectionFactory(username, password));
         }
 
Index: nifi-prometheus-reporting-task/src/test/java/org/apache/nifi/reporting/prometheus/TestPrometheusReportingTask.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.nifi.reporting.prometheus;\n\nimport org.apache.nifi.controller.status.ProcessGroupStatus;\nimport org.apache.nifi.controller.status.ProcessorStatus;\nimport org.apache.nifi.logging.ComponentLog;\nimport org.apache.nifi.reporting.EventAccess;\nimport org.apache.nifi.reporting.InitializationException;\nimport org.apache.nifi.reporting.ReportingContext;\nimport org.apache.nifi.reporting.ReportingInitializationContext;\nimport org.apache.nifi.util.MockPropertyValue;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Matchers;\nimport org.mockito.Mockito;\n\nimport javax.ws.rs.client.Client;\nimport javax.ws.rs.client.Entity;\nimport javax.ws.rs.client.Invocation;\nimport javax.ws.rs.client.WebTarget;\nimport javax.ws.rs.core.Response;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.UUID;\n\npublic class TestPrometheusReportingTask {\n\n    private ProcessGroupStatus status;\n\n    @Before\n    public void setup() {\n        status = new ProcessGroupStatus();\n        status.setId(\"1234\");\n        status.setName(\"localTest\");\n        status.setFlowFilesReceived(5);\n        status.setFlowFilesSent(10);\n        status.setFlowFilesTransferred(10);\n        status.setBytesReceived(10000);\n        status.setBytesSent(20000);\n        status.setBytesTransferred(10000);\n        status.setBytesRead(60000L);\n        status.setBytesWritten(80000L);\n        status.setQueuedCount(100);\n        status.setQueuedContentSize(1024L);\n        status.setActiveThreadCount(5);\n        status.setInputCount(10);\n        status.setOutputCount(20);\n        status.setQueuedCount(30);\n        status.setInputContentSize(Integer.toUnsignedLong(0));\n        status.setOutputContentSize(Integer.toUnsignedLong(0));\n        status.setOutputContentSize(Integer.toUnsignedLong(0));\n\n\n        // create a processor status with processing time\n        ProcessorStatus procStatus = new ProcessorStatus();\n        procStatus.setProcessingNanos(123456789);\n\n        Collection<ProcessorStatus> processorStatuses = new ArrayList<>();\n        processorStatuses.add(procStatus);\n        status.setProcessorStatus(processorStatuses);\n\n        // create a group status with processing time\n        ProcessGroupStatus groupStatus = new ProcessGroupStatus();\n        groupStatus.setProcessorStatus(processorStatuses);\n\n        Collection<ProcessGroupStatus> groupStatuses = new ArrayList<>();\n        groupStatuses.add(groupStatus);\n        status.setProcessGroupStatus(groupStatuses);\n    }\n\n    @Test\n    public void testOnTrigger() throws InitializationException, IOException {\n        final String metricsUrl = \"http://localhost:9091\";\n        final String applicationId = \"nifi\";\n        final String hostName = \"localhost\";\n        final String jobName = \"nifi_reporting_job\";\n        final boolean jvmMetrics = true;\n\n        // create the jersey client mocks for handling the post\n        final Client client = Mockito.mock(Client.class);\n        final WebTarget target = Mockito.mock(WebTarget.class);\n        final Invocation.Builder builder = Mockito.mock(Invocation.Builder.class);\n\n        final Response response = Mockito.mock(Response.class);\n        Mockito.when(response.getStatus()).thenReturn(200);\n\n        Mockito.when(client.target(metricsUrl)).thenReturn(target);\n        Mockito.when(target.request()).thenReturn(builder);\n        Mockito.when(builder.post(Matchers.any(Entity.class))).thenReturn(response);\n\n        // mock the ReportingInitializationContext for initialize(...)\n        final ComponentLog logger = Mockito.mock(ComponentLog.class);\n        final ReportingInitializationContext initContext = Mockito.mock(ReportingInitializationContext.class);\n        Mockito.when(initContext.getIdentifier()).thenReturn(UUID.randomUUID().toString());\n        Mockito.when(initContext.getLogger()).thenReturn(logger);\n\n\n        // mock the ReportingContext for onTrigger(...)\n        final ReportingContext context = Mockito.mock(ReportingContext.class);\n        Mockito.when(context.getProperty(PrometheusReportingTask.METRICS_COLLECTOR_URL))\n                .thenReturn(new MockPropertyValue(metricsUrl));\n        Mockito.when(context.getProperty(PrometheusReportingTask.APPLICATION_ID))\n                .thenReturn(new MockPropertyValue(applicationId));\n        Mockito.when(context.getProperty(PrometheusReportingTask.INSTANCE_ID))\n                .thenReturn(new MockPropertyValue(hostName));\n        Mockito.when(context.getProperty(PrometheusReportingTask.PROCESS_GROUP_IDS))\n                .thenReturn(new MockPropertyValue(\"1234\"));\n        Mockito.when(context.getProperty(PrometheusReportingTask.JOB_NAME))\n                .thenReturn(new MockPropertyValue(jobName));\n        Mockito.when(context.getProperty(PrometheusReportingTask.SEND_JVM_METRICS))\n                .thenReturn(new MockPropertyValue(Boolean.toString(jvmMetrics)));\n\n        final EventAccess eventAccess = Mockito.mock(EventAccess.class);\n        Mockito.when(context.getEventAccess()).thenReturn(eventAccess);\n        Mockito.when(eventAccess.getControllerStatus()).thenReturn(status);\n        Mockito.when(eventAccess.getGroupStatus(\"1234\")).thenReturn(status);\n\n        // create a testable instance of the reporting task\n        final PrometheusReportingTask task = new PrometheusReportingTask();\n        task.initialize(initContext);\n        task.onTrigger(context);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- nifi-prometheus-reporting-task/src/test/java/org/apache/nifi/reporting/prometheus/TestPrometheusReportingTask.java	(date 1533023184000)
+++ nifi-prometheus-reporting-task/src/test/java/org/apache/nifi/reporting/prometheus/TestPrometheusReportingTask.java	(date 1533024049000)
@@ -91,6 +91,7 @@
         final String hostName = "localhost";
         final String jobName = "nifi_reporting_job";
         final boolean jvmMetrics = true;
+        final boolean authentication = false;
 
         // create the jersey client mocks for handling the post
         final Client client = Mockito.mock(Client.class);
@@ -125,6 +126,8 @@
                 .thenReturn(new MockPropertyValue(jobName));
         Mockito.when(context.getProperty(PrometheusReportingTask.SEND_JVM_METRICS))
                 .thenReturn(new MockPropertyValue(Boolean.toString(jvmMetrics)));
+        Mockito.when(context.getProperty(PrometheusReportingTask.USE_AUTHENTICATION))
+                .thenReturn(new MockPropertyValue(Boolean.toString(authentication)));
 
         final EventAccess eventAccess = Mockito.mock(EventAccess.class);
         Mockito.when(context.getEventAccess()).thenReturn(eventAccess);
